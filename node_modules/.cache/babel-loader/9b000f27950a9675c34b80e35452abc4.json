{"ast":null,"code":"var _jsxFileName = \"/home/cabraloko/trybe/vamos-brincar/trybewallet/src/components/Form.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesToState, sendEditToGlobal } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  value: '',\n  description: '',\n  tag: 'Alimentação',\n  method: 'Dinheiro',\n  currency: 'USD'\n};\n\nclass Form extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = { ...INITIAL_STATE,\n      id: 0,\n      exchangeRates: {}\n    };\n\n    this.handleChange = _ref => {\n      let {\n        target: {\n          name,\n          value\n        }\n      } = _ref;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.addItemToTable = async event => {\n      event.preventDefault();\n      const {\n        dispatch,\n        expenses\n      } = this.props;\n      const rates = await dispatch(fetchCurrencies());\n      this.setState({\n        exchangeRates: rates.payload,\n        id: expenses.length\n      });\n      dispatch(sendExpensesToState(this.state));\n      this.setState({ ...INITIAL_STATE,\n        id: expenses.length + 1\n      });\n    };\n\n    this.editItemList = event => {\n      event.preventDefault();\n      const {\n        dispatch,\n        expenses,\n        idToEdit\n      } = this.props;\n      const expenseToEdit = expenses.find(element => element.id === idToEdit);\n      const estadoFiltrado = { ...this.state\n      };\n      delete estadoFiltrado.exchangeRates;\n      const novaDespesa = { ...expenseToEdit,\n        ...estadoFiltrado\n      };\n      dispatch(sendEditToGlobal(novaDespesa));\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      dispatch\n    } = this.props;\n    await dispatch(fetchCurrencies());\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const {\n      editor,\n      idToEdit,\n      expenseToEdit\n    } = nextProps;\n    const {\n      id\n    } = this.state;\n\n    if (editor && id !== idToEdit) {\n      this.setState(expenseToEdit);\n      return true;\n    }\n\n    return true;\n  }\n\n  render() {\n    const {\n      currencies,\n      methods,\n      tags,\n      editor\n    } = this.props;\n    const {\n      value,\n      description,\n      method,\n      tag,\n      currency\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-wallet\",\n      onSubmit: editor ? this.editItemList : this.addItemToTable,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"value\",\n        children: [\"Valor\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          \"data-testid\": \"value-input\",\n          value: value,\n          onChange: this.handleChange,\n          name: \"value\",\n          autoComplete: \"off\",\n          placeholder: \"Ex: 10,00\",\n          className: \"input-form\",\n          id: \"value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Descri\\xE7\\xE3o\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"description\",\n          \"data-testid\": \"description-input\",\n          placeholder: \"Ex: Cachorro quente\",\n          value: description,\n          onChange: this.handleChange,\n          name: \"description\",\n          autoComplete: \"off\",\n          className: \"input-form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"currencies\",\n        children: [\"Moeda\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: currency,\n          onChange: this.handleChange,\n          id: \"currencies\",\n          name: \"currency\",\n          className: \"input-select\",\n          children: currencies.map(currencyName => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: currencyName,\n            children: currencyName\n          }, currencyName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"method\",\n        children: [\"M\\xE9todo de pagamento\", /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"method\",\n          \"data-testid\": \"method-input\",\n          value: method,\n          onChange: this.handleChange,\n          name: \"method\",\n          className: \"input-select\",\n          children: methods.map(methodName => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: methodName,\n            children: methodName\n          }, methodName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"tag\",\n        children: [\"Categoria\", /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"tag\",\n          value: tag,\n          onChange: this.handleChange,\n          name: \"tag\",\n          \"data-testid\": \"tag-input\",\n          className: \"input-select\",\n          children: tags.map(tagName => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: tagName,\n            children: tagName\n          }, tagName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn form-button\",\n        disabled: !(value && description),\n        children: editor ? 'Editar despesa' : 'Adicionar despesa'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currencies: state.wallet.currencies,\n  methods: state.data.methods,\n  tags: state.data.tags,\n  expenseToEdit: state.wallet.expenseToEdit,\n  editor: state.wallet.editor,\n  idToEdit: state.wallet.idToEdit,\n  expenses: state.wallet.expenses\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  methods: PropTypes.arrayOf(PropTypes.string),\n  tags: PropTypes.arrayOf(PropTypes.string)\n}.isRequired;\nexport default connect(mapStateToProps)(Form);","map":{"version":3,"names":["React","PropTypes","connect","fetchCurrencies","sendExpensesToState","sendEditToGlobal","INITIAL_STATE","value","description","tag","method","currency","Form","Component","state","id","exchangeRates","handleChange","target","name","setState","addItemToTable","event","preventDefault","dispatch","expenses","props","rates","payload","length","editItemList","idToEdit","expenseToEdit","find","element","estadoFiltrado","novaDespesa","componentDidMount","shouldComponentUpdate","nextProps","editor","render","currencies","methods","tags","map","currencyName","methodName","tagName","mapStateToProps","wallet","data","propTypes","arrayOf","string","isRequired"],"sources":["/home/cabraloko/trybe/vamos-brincar/trybewallet/src/components/Form.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesToState, sendEditToGlobal } from '../actions';\n\nconst INITIAL_STATE = {\n  value: '',\n  description: '',\n  tag: 'Alimentação',\n  method: 'Dinheiro',\n  currency: 'USD',\n};\nclass Form extends React.Component {\n  state = {\n    ...INITIAL_STATE,\n    id: 0,\n    exchangeRates: {},\n  };\n\n  async componentDidMount() {\n    const { dispatch } = this.props;\n    await dispatch(fetchCurrencies());\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const { editor, idToEdit, expenseToEdit } = nextProps;\n    const { id } = this.state;\n    if (editor && id !== idToEdit) {\n      this.setState(expenseToEdit);\n      return true;\n    }\n    return true;\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  addItemToTable = async (event) => {\n    event.preventDefault();\n    const { dispatch, expenses } = this.props;\n    const rates = await dispatch(fetchCurrencies());\n\n    this.setState(({ exchangeRates: rates.payload, id: expenses.length }));\n\n    dispatch(sendExpensesToState(this.state));\n    this.setState(({\n      ...INITIAL_STATE,\n      id: expenses.length + 1,\n    }));\n  };\n\n  editItemList = (event) => {\n    event.preventDefault();\n    const { dispatch, expenses, idToEdit } = this.props;\n    const expenseToEdit = expenses.find((element) => element.id === idToEdit);\n    const estadoFiltrado = { ...this.state };\n    delete estadoFiltrado.exchangeRates;\n    const novaDespesa = { ...expenseToEdit, ...estadoFiltrado };\n    dispatch(sendEditToGlobal(novaDespesa));\n  };\n\n  render() {\n    const { currencies, methods, tags, editor } = this.props;\n    const { value, description, method, tag, currency } = this.state;\n    return (\n      <form\n        className=\"form-wallet\"\n        onSubmit={ editor ? this.editItemList : this.addItemToTable }\n      >\n        <label htmlFor=\"value\">\n          Valor\n          <input\n            type=\"number\"\n            data-testid=\"value-input\"\n            value={ value }\n            onChange={ this.handleChange }\n            name=\"value\"\n            autoComplete=\"off\"\n            placeholder=\"Ex: 10,00\"\n            className=\"input-form\"\n            id=\"value\"\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Descrição\n          <input\n            type=\"text\"\n            id=\"description\"\n            data-testid=\"description-input\"\n            placeholder=\"Ex: Cachorro quente\"\n            value={ description }\n            onChange={ this.handleChange }\n            name=\"description\"\n            autoComplete=\"off\"\n            className=\"input-form\"\n          />\n        </label>\n        <label htmlFor=\"currencies\">\n          Moeda\n          <select\n            value={ currency }\n            onChange={ this.handleChange }\n            id=\"currencies\"\n            name=\"currency\"\n            className=\"input-select\"\n          >\n            {currencies.map((currencyName) => (\n              <option\n                value={ currencyName }\n                key={ currencyName }\n              >\n                {currencyName}\n              </option>))}\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          Método de pagamento\n          <select\n            id=\"method\"\n            data-testid=\"method-input\"\n            value={ method }\n            onChange={ this.handleChange }\n            name=\"method\"\n            className=\"input-select\"\n          >\n            {methods.map((methodName) => (\n              <option\n                key={ methodName }\n                value={ methodName }\n              >\n                {methodName}\n              </option>))}\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Categoria\n          <select\n            id=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n            name=\"tag\"\n            data-testid=\"tag-input\"\n            className=\"input-select\"\n          >\n            {tags.map((tagName) => (\n              <option\n                key={ tagName }\n                value={ tagName }\n              >\n                {tagName}\n              </option>))}\n          </select>\n        </label>\n        <button\n          type=\"submit\"\n          className=\"btn form-button\"\n          disabled={ !(value && description) }\n        >\n          {editor ? 'Editar despesa' : 'Adicionar despesa' }\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  methods: state.data.methods,\n  tags: state.data.tags,\n  expenseToEdit: state.wallet.expenseToEdit,\n  editor: state.wallet.editor,\n  idToEdit: state.wallet.idToEdit,\n  expenses: state.wallet.expenses,\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  methods: PropTypes.arrayOf(PropTypes.string),\n  tags: PropTypes.arrayOf(PropTypes.string),\n}.isRequired;\n\nexport default connect(mapStateToProps)(Form);\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,EAA+CC,gBAA/C,QAAuE,YAAvE;;AAEA,MAAMC,aAAa,GAAG;EACpBC,KAAK,EAAE,EADa;EAEpBC,WAAW,EAAE,EAFO;EAGpBC,GAAG,EAAE,aAHe;EAIpBC,MAAM,EAAE,UAJY;EAKpBC,QAAQ,EAAE;AALU,CAAtB;;AAOA,MAAMC,IAAN,SAAmBZ,KAAK,CAACa,SAAzB,CAAmC;EAAA;IAAA;IAAA,KACjCC,KADiC,GACzB,EACN,GAAGR,aADG;MAENS,EAAE,EAAE,CAFE;MAGNC,aAAa,EAAE;IAHT,CADyB;;IAAA,KAsBjCC,YAtBiC,GAsBlB,QAAiC;MAAA,IAAhC;QAAEC,MAAM,EAAE;UAAEC,IAAF;UAAQZ;QAAR;MAAV,CAAgC;MAC9C,KAAKa,QAAL,CAAc;QACZ,CAACD,IAAD,GAAQZ;MADI,CAAd;IAGD,CA1BgC;;IAAA,KA4BjCc,cA5BiC,GA4BhB,MAAOC,KAAP,IAAiB;MAChCA,KAAK,CAACC,cAAN;MACA,MAAM;QAAEC,QAAF;QAAYC;MAAZ,IAAyB,KAAKC,KAApC;MACA,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACrB,eAAe,EAAhB,CAA5B;MAEA,KAAKiB,QAAL,CAAe;QAAEJ,aAAa,EAAEW,KAAK,CAACC,OAAvB;QAAgCb,EAAE,EAAEU,QAAQ,CAACI;MAA7C,CAAf;MAEAL,QAAQ,CAACpB,mBAAmB,CAAC,KAAKU,KAAN,CAApB,CAAR;MACA,KAAKM,QAAL,CAAe,EACb,GAAGd,aADU;QAEbS,EAAE,EAAEU,QAAQ,CAACI,MAAT,GAAkB;MAFT,CAAf;IAID,CAxCgC;;IAAA,KA0CjCC,YA1CiC,GA0CjBR,KAAD,IAAW;MACxBA,KAAK,CAACC,cAAN;MACA,MAAM;QAAEC,QAAF;QAAYC,QAAZ;QAAsBM;MAAtB,IAAmC,KAAKL,KAA9C;MACA,MAAMM,aAAa,GAAGP,QAAQ,CAACQ,IAAT,CAAeC,OAAD,IAAaA,OAAO,CAACnB,EAAR,KAAegB,QAA1C,CAAtB;MACA,MAAMI,cAAc,GAAG,EAAE,GAAG,KAAKrB;MAAV,CAAvB;MACA,OAAOqB,cAAc,CAACnB,aAAtB;MACA,MAAMoB,WAAW,GAAG,EAAE,GAAGJ,aAAL;QAAoB,GAAGG;MAAvB,CAApB;MACAX,QAAQ,CAACnB,gBAAgB,CAAC+B,WAAD,CAAjB,CAAR;IACD,CAlDgC;EAAA;;EAOV,MAAjBC,iBAAiB,GAAG;IACxB,MAAM;MAAEb;IAAF,IAAe,KAAKE,KAA1B;IACA,MAAMF,QAAQ,CAACrB,eAAe,EAAhB,CAAd;EACD;;EAEDmC,qBAAqB,CAACC,SAAD,EAAY;IAC/B,MAAM;MAAEC,MAAF;MAAUT,QAAV;MAAoBC;IAApB,IAAsCO,SAA5C;IACA,MAAM;MAAExB;IAAF,IAAS,KAAKD,KAApB;;IACA,IAAI0B,MAAM,IAAIzB,EAAE,KAAKgB,QAArB,EAA+B;MAC7B,KAAKX,QAAL,CAAcY,aAAd;MACA,OAAO,IAAP;IACD;;IACD,OAAO,IAAP;EACD;;EAgCDS,MAAM,GAAG;IACP,MAAM;MAAEC,UAAF;MAAcC,OAAd;MAAuBC,IAAvB;MAA6BJ;IAA7B,IAAwC,KAAKd,KAAnD;IACA,MAAM;MAAEnB,KAAF;MAASC,WAAT;MAAsBE,MAAtB;MAA8BD,GAA9B;MAAmCE;IAAnC,IAAgD,KAAKG,KAA3D;IACA,oBACE;MACE,SAAS,EAAC,aADZ;MAEE,QAAQ,EAAG0B,MAAM,GAAG,KAAKV,YAAR,GAAuB,KAAKT,cAF/C;MAAA,wBAIE;QAAO,OAAO,EAAC,OAAf;QAAA,iCAEE;UACE,IAAI,EAAC,QADP;UAEE,eAAY,aAFd;UAGE,KAAK,EAAGd,KAHV;UAIE,QAAQ,EAAG,KAAKU,YAJlB;UAKE,IAAI,EAAC,OALP;UAME,YAAY,EAAC,KANf;UAOE,WAAW,EAAC,WAPd;UAQE,SAAS,EAAC,YARZ;UASE,EAAE,EAAC;QATL;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAJF,eAkBE;QAAO,OAAO,EAAC,aAAf;QAAA,2CAEE;UACE,IAAI,EAAC,MADP;UAEE,EAAE,EAAC,aAFL;UAGE,eAAY,mBAHd;UAIE,WAAW,EAAC,qBAJd;UAKE,KAAK,EAAGT,WALV;UAME,QAAQ,EAAG,KAAKS,YANlB;UAOE,IAAI,EAAC,aAPP;UAQE,YAAY,EAAC,KARf;UASE,SAAS,EAAC;QATZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAlBF,eAgCE;QAAO,OAAO,EAAC,YAAf;QAAA,iCAEE;UACE,KAAK,EAAGN,QADV;UAEE,QAAQ,EAAG,KAAKM,YAFlB;UAGE,EAAE,EAAC,YAHL;UAIE,IAAI,EAAC,UAJP;UAKE,SAAS,EAAC,cALZ;UAAA,UAOGyB,UAAU,CAACG,GAAX,CAAgBC,YAAD,iBACd;YACE,KAAK,EAAGA,YADV;YAAA,UAIGA;UAJH,GAEQA,YAFR;YAAA;YAAA;YAAA;UAAA,QADD;QAPH;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAhCF,eAkDE;QAAO,OAAO,EAAC,QAAf;QAAA,kDAEE;UACE,EAAE,EAAC,QADL;UAEE,eAAY,cAFd;UAGE,KAAK,EAAGpC,MAHV;UAIE,QAAQ,EAAG,KAAKO,YAJlB;UAKE,IAAI,EAAC,QALP;UAME,SAAS,EAAC,cANZ;UAAA,UAQG0B,OAAO,CAACE,GAAR,CAAaE,UAAD,iBACX;YAEE,KAAK,EAAGA,UAFV;YAAA,UAIGA;UAJH,GACQA,UADR;YAAA;YAAA;YAAA;UAAA,QADD;QARH;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAlDF,eAqEE;QAAO,OAAO,EAAC,KAAf;QAAA,qCAEE;UACE,EAAE,EAAC,KADL;UAEE,KAAK,EAAGtC,GAFV;UAGE,QAAQ,EAAG,KAAKQ,YAHlB;UAIE,IAAI,EAAC,KAJP;UAKE,eAAY,WALd;UAME,SAAS,EAAC,cANZ;UAAA,UAQG2B,IAAI,CAACC,GAAL,CAAUG,OAAD,iBACR;YAEE,KAAK,EAAGA,OAFV;YAAA,UAIGA;UAJH,GACQA,OADR;YAAA;YAAA;YAAA;UAAA,QADD;QARH;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QArEF,eAwFE;QACE,IAAI,EAAC,QADP;QAEE,SAAS,EAAC,iBAFZ;QAGE,QAAQ,EAAG,EAAEzC,KAAK,IAAIC,WAAX,CAHb;QAAA,UAKGgC,MAAM,GAAG,gBAAH,GAAsB;MAL/B;QAAA;QAAA;QAAA;MAAA,QAxFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAkGD;;AAzJgC;;AA4JnC,MAAMS,eAAe,GAAInC,KAAD,KAAY;EAClC4B,UAAU,EAAE5B,KAAK,CAACoC,MAAN,CAAaR,UADS;EAElCC,OAAO,EAAE7B,KAAK,CAACqC,IAAN,CAAWR,OAFc;EAGlCC,IAAI,EAAE9B,KAAK,CAACqC,IAAN,CAAWP,IAHiB;EAIlCZ,aAAa,EAAElB,KAAK,CAACoC,MAAN,CAAalB,aAJM;EAKlCQ,MAAM,EAAE1B,KAAK,CAACoC,MAAN,CAAaV,MALa;EAMlCT,QAAQ,EAAEjB,KAAK,CAACoC,MAAN,CAAanB,QANW;EAOlCN,QAAQ,EAAEX,KAAK,CAACoC,MAAN,CAAazB;AAPW,CAAZ,CAAxB;;AAUAb,IAAI,CAACwC,SAAL,GAAiB;EACfV,UAAU,EAAEzC,SAAS,CAACoD,OAAV,CAAkBpD,SAAS,CAACqD,MAA5B,CADG;EAEfX,OAAO,EAAE1C,SAAS,CAACoD,OAAV,CAAkBpD,SAAS,CAACqD,MAA5B,CAFM;EAGfV,IAAI,EAAE3C,SAAS,CAACoD,OAAV,CAAkBpD,SAAS,CAACqD,MAA5B;AAHS,EAIfC,UAJF;AAMA,eAAerD,OAAO,CAAC+C,eAAD,CAAP,CAAyBrC,IAAzB,CAAf"},"metadata":{},"sourceType":"module"}